/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { Products } from './enums';

export interface IAuthenticatedInstitutionDto {
    institutionName?: string;
    productAccess?: Array<Products>;
    userName?: string;
}


export class AuthenticatedInstitutionDto extends BaseModel implements IAuthenticatedInstitutionDto  {
    institutionName: string;
    productAccess: Array<Products>;
    userName: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.productAccess = new Array<Products>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.institutionName = rawValues.institutionName;
            this.fillModelArray<Products>(this, 'productAccess', rawValues.productAccess, useFormGroupValuesToModel);
            this.userName = rawValues.userName;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                institutionName: new FormControl(this.institutionName),
                productAccess: new FormArray([]),
                userName: new FormControl(this.userName),
            });
            // generate FormArray control elements
            this.fillFormArray<Products>('productAccess', this.productAccess);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['institutionName'].setValue(this.institutionName);
        this.fillFormArray<Products>('productAccess', this.productAccess);
        this.$formGroup.controls['userName'].setValue(this.userName);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

