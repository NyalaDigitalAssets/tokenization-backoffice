/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { BulkResultItemStatus } from './enums';

export interface IBulkResultItemDto {
    requestId?: string;
    locationId?: string;
    status?: BulkResultItemStatus;
    reason?: string;
}


export class BulkResultItemDto extends BaseModel implements IBulkResultItemDto  {
    requestId: string;
    locationId: string;
    status: BulkResultItemStatus;
    reason: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.requestId = rawValues.requestId;
            this.locationId = rawValues.locationId;
            this.status = rawValues.status;
            this.reason = rawValues.reason;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                requestId: new FormControl(this.requestId),
                locationId: new FormControl(this.locationId),
                status: new FormControl(this.status, [enumValidator(BulkResultItemStatus), ]),
                reason: new FormControl(this.reason),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['requestId'].setValue(this.requestId);
        this.$formGroup.controls['locationId'].setValue(this.locationId);
        this.$formGroup.controls['status'].setValue(this.status);
        this.$formGroup.controls['reason'].setValue(this.reason);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

