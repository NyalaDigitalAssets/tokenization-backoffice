/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { WealthManagementProductType } from './enums';
import { WealthManagementPurposeType } from './enums';
import { WealthManagementHorizonType } from './enums';
import { EtfOnboardingPersonalDataDto } from './etf-onboarding-personal-data-dto.model';

export interface ICreateEtfOnboardingDto {
    product?: WealthManagementProductType;
    investmentAmount?: number;
    monthlyInvestmentAmount?: number;
    investmentGoal?: WealthManagementPurposeType;
    investmentHorizon?: WealthManagementHorizonType;
    monthlyNetIncome?: number;
    monthlyCost?: number;
    monetaryAssets?: number;
    stockAssets?: number;
    propertyAssets?: number;
    otherAssets?: number;
    liabilities?: number;
    risk?: number;
    changeInDataAgreement?: boolean;
    preSigningAgreement?: boolean;
    newsletterAgreement?: boolean;
    wealthManagementAgreement?: boolean;
    depotAccountAgreement?: boolean;
    dataPrivacyAgreement?: boolean;
    personalDataModel?: EtfOnboardingPersonalDataDto;
}


export class CreateEtfOnboardingDto extends BaseModel implements ICreateEtfOnboardingDto  {
    product: WealthManagementProductType;
    investmentAmount: number;
    monthlyInvestmentAmount: number;
    investmentGoal: WealthManagementPurposeType;
    investmentHorizon: WealthManagementHorizonType;
    monthlyNetIncome: number;
    monthlyCost: number;
    monetaryAssets: number;
    stockAssets: number;
    propertyAssets: number;
    otherAssets: number;
    liabilities: number;
    risk: number;
    changeInDataAgreement: boolean;
    preSigningAgreement: boolean;
    newsletterAgreement: boolean;
    wealthManagementAgreement: boolean;
    depotAccountAgreement: boolean;
    dataPrivacyAgreement: boolean;
    personalDataModel: EtfOnboardingPersonalDataDto;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.personalDataModel = new EtfOnboardingPersonalDataDto(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.product = rawValues.product;
            this.investmentAmount = rawValues.investmentAmount;
            this.monthlyInvestmentAmount = rawValues.monthlyInvestmentAmount;
            this.investmentGoal = rawValues.investmentGoal;
            this.investmentHorizon = rawValues.investmentHorizon;
            this.monthlyNetIncome = rawValues.monthlyNetIncome;
            this.monthlyCost = rawValues.monthlyCost;
            this.monetaryAssets = rawValues.monetaryAssets;
            this.stockAssets = rawValues.stockAssets;
            this.propertyAssets = rawValues.propertyAssets;
            this.otherAssets = rawValues.otherAssets;
            this.liabilities = rawValues.liabilities;
            this.risk = rawValues.risk;
            this.changeInDataAgreement = rawValues.changeInDataAgreement;
            this.preSigningAgreement = rawValues.preSigningAgreement;
            this.newsletterAgreement = rawValues.newsletterAgreement;
            this.wealthManagementAgreement = rawValues.wealthManagementAgreement;
            this.depotAccountAgreement = rawValues.depotAccountAgreement;
            this.dataPrivacyAgreement = rawValues.dataPrivacyAgreement;
            this.personalDataModel.setValues(rawValues.personalDataModel, useFormGroupValuesToModel);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                product: new FormControl(this.product, [enumValidator(WealthManagementProductType), ]),
                investmentAmount: new FormControl(this.investmentAmount),
                monthlyInvestmentAmount: new FormControl(this.monthlyInvestmentAmount),
                investmentGoal: new FormControl(this.investmentGoal, [enumValidator(WealthManagementPurposeType), ]),
                investmentHorizon: new FormControl(this.investmentHorizon, [enumValidator(WealthManagementHorizonType), ]),
                monthlyNetIncome: new FormControl(this.monthlyNetIncome),
                monthlyCost: new FormControl(this.monthlyCost),
                monetaryAssets: new FormControl(this.monetaryAssets),
                stockAssets: new FormControl(this.stockAssets),
                propertyAssets: new FormControl(this.propertyAssets),
                otherAssets: new FormControl(this.otherAssets),
                liabilities: new FormControl(this.liabilities),
                risk: new FormControl(this.risk),
                changeInDataAgreement: new FormControl(this.changeInDataAgreement),
                preSigningAgreement: new FormControl(this.preSigningAgreement),
                newsletterAgreement: new FormControl(this.newsletterAgreement),
                wealthManagementAgreement: new FormControl(this.wealthManagementAgreement),
                depotAccountAgreement: new FormControl(this.depotAccountAgreement),
                dataPrivacyAgreement: new FormControl(this.dataPrivacyAgreement),
                personalDataModel: this.personalDataModel.$formGroup,
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['product'].setValue(this.product);
        this.$formGroup.controls['investmentAmount'].setValue(this.investmentAmount);
        this.$formGroup.controls['monthlyInvestmentAmount'].setValue(this.monthlyInvestmentAmount);
        this.$formGroup.controls['investmentGoal'].setValue(this.investmentGoal);
        this.$formGroup.controls['investmentHorizon'].setValue(this.investmentHorizon);
        this.$formGroup.controls['monthlyNetIncome'].setValue(this.monthlyNetIncome);
        this.$formGroup.controls['monthlyCost'].setValue(this.monthlyCost);
        this.$formGroup.controls['monetaryAssets'].setValue(this.monetaryAssets);
        this.$formGroup.controls['stockAssets'].setValue(this.stockAssets);
        this.$formGroup.controls['propertyAssets'].setValue(this.propertyAssets);
        this.$formGroup.controls['otherAssets'].setValue(this.otherAssets);
        this.$formGroup.controls['liabilities'].setValue(this.liabilities);
        this.$formGroup.controls['risk'].setValue(this.risk);
        this.$formGroup.controls['changeInDataAgreement'].setValue(this.changeInDataAgreement);
        this.$formGroup.controls['preSigningAgreement'].setValue(this.preSigningAgreement);
        this.$formGroup.controls['newsletterAgreement'].setValue(this.newsletterAgreement);
        this.$formGroup.controls['wealthManagementAgreement'].setValue(this.wealthManagementAgreement);
        this.$formGroup.controls['depotAccountAgreement'].setValue(this.depotAccountAgreement);
        this.$formGroup.controls['dataPrivacyAgreement'].setValue(this.dataPrivacyAgreement);
        this.personalDataModel.setFormGroupValues();
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

