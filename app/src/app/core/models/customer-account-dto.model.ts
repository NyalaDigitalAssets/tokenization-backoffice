/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { AccountTypes } from './enums';
import { RetailWalletAccessLevels } from './enums';
import { CustomerAddressDto } from './customer-address-dto.model';
import { GenderTypes } from './enums';

export interface ICustomerAccountDto {
    id?: string;
    institutionId?: string;
    institutionName?: string;
    salutation?: string;
    type?: AccountTypes;
    birthDate?: Date;
    title?: string;
    firstname?: string;
    lastname?: string;
    email?: string;
    phoneNumber?: string;
    walletAccess?: RetailWalletAccessLevels;
    address?: CustomerAddressDto;
    nationalityId?: string;
    nationalityIso?: string;
    gender?: GenderTypes;
}


export class CustomerAccountDto extends BaseModel implements ICustomerAccountDto  {
    id: string;
    institutionId: string;
    institutionName: string;
    salutation: string;
    type: AccountTypes;
    birthDate: Date;
    title: string;
    firstname: string;
    lastname: string;
    email: string;
    phoneNumber: string;
    walletAccess: RetailWalletAccessLevels;
    address: CustomerAddressDto;
    nationalityId: string;
    nationalityIso: string;
    gender: GenderTypes;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.address = new CustomerAddressDto(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.institutionId = rawValues.institutionId;
            this.institutionName = rawValues.institutionName;
            this.salutation = rawValues.salutation;
            this.type = rawValues.type;
            this.birthDate = rawValues.birthDate;
            this.title = rawValues.title;
            this.firstname = rawValues.firstname;
            this.lastname = rawValues.lastname;
            this.email = rawValues.email;
            this.phoneNumber = rawValues.phoneNumber;
            this.walletAccess = rawValues.walletAccess;
            this.address.setValues(rawValues.address, useFormGroupValuesToModel);
            this.nationalityId = rawValues.nationalityId;
            this.nationalityIso = rawValues.nationalityIso;
            this.gender = rawValues.gender;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                institutionId: new FormControl(this.institutionId),
                institutionName: new FormControl(this.institutionName),
                salutation: new FormControl(this.salutation),
                type: new FormControl(this.type, [enumValidator(AccountTypes), ]),
                birthDate: new FormControl(this.birthDate),
                title: new FormControl(this.title),
                firstname: new FormControl(this.firstname),
                lastname: new FormControl(this.lastname),
                email: new FormControl(this.email),
                phoneNumber: new FormControl(this.phoneNumber),
                walletAccess: new FormControl(this.walletAccess, [enumValidator(RetailWalletAccessLevels), ]),
                address: this.address.$formGroup,
                nationalityId: new FormControl(this.nationalityId),
                nationalityIso: new FormControl(this.nationalityIso),
                gender: new FormControl(this.gender, [enumValidator(GenderTypes), ]),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['institutionId'].setValue(this.institutionId);
        this.$formGroup.controls['institutionName'].setValue(this.institutionName);
        this.$formGroup.controls['salutation'].setValue(this.salutation);
        this.$formGroup.controls['type'].setValue(this.type);
        this.$formGroup.controls['birthDate'].setValue(this.birthDate);
        this.$formGroup.controls['title'].setValue(this.title);
        this.$formGroup.controls['firstname'].setValue(this.firstname);
        this.$formGroup.controls['lastname'].setValue(this.lastname);
        this.$formGroup.controls['email'].setValue(this.email);
        this.$formGroup.controls['phoneNumber'].setValue(this.phoneNumber);
        this.$formGroup.controls['walletAccess'].setValue(this.walletAccess);
        this.address.setFormGroupValues();
        this.$formGroup.controls['nationalityId'].setValue(this.nationalityId);
        this.$formGroup.controls['nationalityIso'].setValue(this.nationalityIso);
        this.$formGroup.controls['gender'].setValue(this.gender);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

