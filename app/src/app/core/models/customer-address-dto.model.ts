/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { CountryDto } from './country-dto.model';

export interface ICustomerAddressDto {
    id?: string;
    street?: string;
    streetNo?: string;
    postalCode?: string;
    town?: string;
    country?: CountryDto;
}


export class CustomerAddressDto extends BaseModel implements ICustomerAddressDto  {
    id: string;
    street: string;
    streetNo: string;
    postalCode: string;
    town: string;
    country: CountryDto;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.country = new CountryDto(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.street = rawValues.street;
            this.streetNo = rawValues.streetNo;
            this.postalCode = rawValues.postalCode;
            this.town = rawValues.town;
            this.country.setValues(rawValues.country, useFormGroupValuesToModel);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                street: new FormControl(this.street),
                streetNo: new FormControl(this.streetNo),
                postalCode: new FormControl(this.postalCode),
                town: new FormControl(this.town),
                country: this.country.$formGroup,
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['street'].setValue(this.street);
        this.$formGroup.controls['streetNo'].setValue(this.streetNo);
        this.$formGroup.controls['postalCode'].setValue(this.postalCode);
        this.$formGroup.controls['town'].setValue(this.town);
        this.country.setFormGroupValues();
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

