/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { DepotPaymentSummaryBankAccountDto } from './depot-payment-summary-bank-account-dto.model';
import { DepotPaymentSummaryWithdrawalDto } from './depot-payment-summary-withdrawal-dto.model';

export interface IDepotPaymentSummaryDto {
    recurringDepositAmount?: number;
    oneTimeDepositAmount?: number;
    portfolioAmount?: number;
    referenceAccount?: DepotPaymentSummaryBankAccountDto;
    depotBankAccount?: DepotPaymentSummaryBankAccountDto;
    withdrawal?: DepotPaymentSummaryWithdrawalDto;
}


export class DepotPaymentSummaryDto extends BaseModel implements IDepotPaymentSummaryDto  {
    recurringDepositAmount: number;
    oneTimeDepositAmount: number;
    portfolioAmount: number;
    referenceAccount: DepotPaymentSummaryBankAccountDto;
    depotBankAccount: DepotPaymentSummaryBankAccountDto;
    withdrawal: DepotPaymentSummaryWithdrawalDto;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.referenceAccount = new DepotPaymentSummaryBankAccountDto(); 
        this.depotBankAccount = new DepotPaymentSummaryBankAccountDto(); 
        this.withdrawal = new DepotPaymentSummaryWithdrawalDto(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.recurringDepositAmount = rawValues.recurringDepositAmount;
            this.oneTimeDepositAmount = rawValues.oneTimeDepositAmount;
            this.portfolioAmount = rawValues.portfolioAmount;
            this.referenceAccount.setValues(rawValues.referenceAccount, useFormGroupValuesToModel);
            this.depotBankAccount.setValues(rawValues.depotBankAccount, useFormGroupValuesToModel);
            this.withdrawal.setValues(rawValues.withdrawal, useFormGroupValuesToModel);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                recurringDepositAmount: new FormControl(this.recurringDepositAmount),
                oneTimeDepositAmount: new FormControl(this.oneTimeDepositAmount),
                portfolioAmount: new FormControl(this.portfolioAmount),
                referenceAccount: this.referenceAccount.$formGroup,
                depotBankAccount: this.depotBankAccount.$formGroup,
                withdrawal: this.withdrawal.$formGroup,
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['recurringDepositAmount'].setValue(this.recurringDepositAmount);
        this.$formGroup.controls['oneTimeDepositAmount'].setValue(this.oneTimeDepositAmount);
        this.$formGroup.controls['portfolioAmount'].setValue(this.portfolioAmount);
        this.referenceAccount.setFormGroupValues();
        this.depotBankAccount.setFormGroupValues();
        this.withdrawal.setFormGroupValues();
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

