/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { SepaExportTransactionStatus } from './enums';
import { EtfPayoutRequestStatus } from './enums';

export interface IDepotPaymentSummaryWithdrawalDto {
    id?: string;
    created?: Date;
    createdBy?: string;
    due?: Date;
    processed?: Date;
    amount?: number;
    transactionId?: string;
    transactionStatus?: SepaExportTransactionStatus;
    type?: EtfPayoutRequestStatus;
    liquidate?: boolean;
}


export class DepotPaymentSummaryWithdrawalDto extends BaseModel implements IDepotPaymentSummaryWithdrawalDto  {
    id: string;
    created: Date;
    createdBy: string;
    due: Date;
    processed: Date;
    amount: number;
    transactionId: string;
    transactionStatus: SepaExportTransactionStatus;
    type: EtfPayoutRequestStatus;
    liquidate: boolean;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.created = rawValues.created;
            this.createdBy = rawValues.createdBy;
            this.due = rawValues.due;
            this.processed = rawValues.processed;
            this.amount = rawValues.amount;
            this.transactionId = rawValues.transactionId;
            this.transactionStatus = rawValues.transactionStatus;
            this.type = rawValues.type;
            this.liquidate = rawValues.liquidate;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                created: new FormControl(this.created),
                createdBy: new FormControl(this.createdBy),
                due: new FormControl(this.due),
                processed: new FormControl(this.processed),
                amount: new FormControl(this.amount),
                transactionId: new FormControl(this.transactionId),
                transactionStatus: new FormControl(this.transactionStatus, [enumValidator(SepaExportTransactionStatus), ]),
                type: new FormControl(this.type, [enumValidator(EtfPayoutRequestStatus), ]),
                liquidate: new FormControl(this.liquidate),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['created'].setValue(this.created);
        this.$formGroup.controls['createdBy'].setValue(this.createdBy);
        this.$formGroup.controls['due'].setValue(this.due);
        this.$formGroup.controls['processed'].setValue(this.processed);
        this.$formGroup.controls['amount'].setValue(this.amount);
        this.$formGroup.controls['transactionId'].setValue(this.transactionId);
        this.$formGroup.controls['transactionStatus'].setValue(this.transactionStatus);
        this.$formGroup.controls['type'].setValue(this.type);
        this.$formGroup.controls['liquidate'].setValue(this.liquidate);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

