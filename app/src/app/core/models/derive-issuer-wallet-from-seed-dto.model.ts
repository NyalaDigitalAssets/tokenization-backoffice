/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { Blockchains } from './enums';
import { SimpleAccessCredentialsDto } from './simple-access-credentials-dto.model';
import { IssuerWalletRoles } from './enums';

export interface IDeriveIssuerWalletFromSeedDto {
    blockchain: Blockchains;
    accountIndex: number;
    credentials?: SimpleAccessCredentialsDto;
    role: IssuerWalletRoles;
}


export class DeriveIssuerWalletFromSeedDto extends BaseModel implements IDeriveIssuerWalletFromSeedDto  {
    blockchain: Blockchains;
    accountIndex: number;
    credentials: SimpleAccessCredentialsDto;
    role: IssuerWalletRoles;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.credentials = new SimpleAccessCredentialsDto(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.blockchain = rawValues.blockchain;
            this.accountIndex = rawValues.accountIndex;
            this.credentials.setValues(rawValues.credentials, useFormGroupValuesToModel);
            this.role = rawValues.role;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                blockchain: new FormControl(this.blockchain, [Validators.required, enumValidator(Blockchains), ]),
                accountIndex: new FormControl(this.accountIndex, [Validators.required, minValueValidator(0), maxValueValidator(1024), ]),
                credentials: this.credentials.$formGroup,
                role: new FormControl(this.role, [Validators.required, enumValidator(IssuerWalletRoles), ]),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['blockchain'].setValue(this.blockchain);
        this.$formGroup.controls['accountIndex'].setValue(this.accountIndex);
        this.credentials.setFormGroupValues();
        this.$formGroup.controls['role'].setValue(this.role);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

