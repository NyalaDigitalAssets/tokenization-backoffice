/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { WealthManagementProductType } from './enums';
import { EtfSecurityDto } from './etf-security-dto.model';
import { EtfValueDto } from './etf-value-dto.model';
import { PartnerBankType } from './enums';
import { EtfRole } from './enums';
import { InvestmentBondDepotPerformanceDto } from './investment-bond-depot-performance-dto.model';

export interface IEtfDto {
    id?: string;
    product?: WealthManagementProductType;
    updated?: Date;
    productName?: string;
    info?: string;
    total?: number;
    cash?: number;
    securities?: Array<EtfSecurityDto>;
    excludeCashFromOverview?: boolean;
    currentStockRate?: number;
    aq?: number;
    lastDayDate?: Date;
    lastDayTotal?: number;
    valueHistory?: Array<EtfValueDto>;
    depositTotal?: number;
    depositYearToDate?: number;
    partnerBankName?: string;
    partnerBank?: PartnerBankType;
    customerRole?: EtfRole;
    depotPerformance?: InvestmentBondDepotPerformanceDto;
}


export class EtfDto extends BaseModel implements IEtfDto  {
    id: string;
    product: WealthManagementProductType;
    updated: Date;
    productName: string;
    info: string;
    total: number;
    cash: number;
    securities: Array<EtfSecurityDto>;
    excludeCashFromOverview: boolean;
    currentStockRate: number;
    aq: number;
    lastDayDate: Date;
    lastDayTotal: number;
    valueHistory: Array<EtfValueDto>;
    depositTotal: number;
    depositYearToDate: number;
    partnerBankName: string;
    partnerBank: PartnerBankType;
    customerRole: EtfRole;
    depotPerformance: InvestmentBondDepotPerformanceDto;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.securities = new Array<EtfSecurityDto>(); 
        this.valueHistory = new Array<EtfValueDto>(); 
        this.depotPerformance = new InvestmentBondDepotPerformanceDto(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.product = rawValues.product;
            this.updated = rawValues.updated;
            this.productName = rawValues.productName;
            this.info = rawValues.info;
            this.total = rawValues.total;
            this.cash = rawValues.cash;
            this.fillModelArray<EtfSecurityDto>(this, 'securities', rawValues.securities, useFormGroupValuesToModel, EtfSecurityDto, SubTypeFactory.createSubTypeInstance);
            this.excludeCashFromOverview = rawValues.excludeCashFromOverview;
            this.currentStockRate = rawValues.currentStockRate;
            this.aq = rawValues.aq;
            this.lastDayDate = rawValues.lastDayDate;
            this.lastDayTotal = rawValues.lastDayTotal;
            this.fillModelArray<EtfValueDto>(this, 'valueHistory', rawValues.valueHistory, useFormGroupValuesToModel, EtfValueDto, SubTypeFactory.createSubTypeInstance);
            this.depositTotal = rawValues.depositTotal;
            this.depositYearToDate = rawValues.depositYearToDate;
            this.partnerBankName = rawValues.partnerBankName;
            this.partnerBank = rawValues.partnerBank;
            this.customerRole = rawValues.customerRole;
            this.depotPerformance.setValues(rawValues.depotPerformance, useFormGroupValuesToModel);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                product: new FormControl(this.product, [enumValidator(WealthManagementProductType), ]),
                updated: new FormControl(this.updated),
                productName: new FormControl(this.productName),
                info: new FormControl(this.info),
                total: new FormControl(this.total),
                cash: new FormControl(this.cash),
                securities: new FormArray([]),
                excludeCashFromOverview: new FormControl(this.excludeCashFromOverview),
                currentStockRate: new FormControl(this.currentStockRate),
                aq: new FormControl(this.aq),
                lastDayDate: new FormControl(this.lastDayDate),
                lastDayTotal: new FormControl(this.lastDayTotal),
                valueHistory: new FormArray([]),
                depositTotal: new FormControl(this.depositTotal),
                depositYearToDate: new FormControl(this.depositYearToDate),
                partnerBankName: new FormControl(this.partnerBankName),
                partnerBank: new FormControl(this.partnerBank, [enumValidator(PartnerBankType), ]),
                customerRole: new FormControl(this.customerRole, [enumValidator(EtfRole), ]),
                depotPerformance: this.depotPerformance.$formGroup,
            });
            // generate FormArray control elements
            this.fillFormArray<EtfSecurityDto>('securities', this.securities, EtfSecurityDto);
            // generate FormArray control elements
            this.fillFormArray<EtfValueDto>('valueHistory', this.valueHistory, EtfValueDto);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['product'].setValue(this.product);
        this.$formGroup.controls['updated'].setValue(this.updated);
        this.$formGroup.controls['productName'].setValue(this.productName);
        this.$formGroup.controls['info'].setValue(this.info);
        this.$formGroup.controls['total'].setValue(this.total);
        this.$formGroup.controls['cash'].setValue(this.cash);
        this.fillFormArray<EtfSecurityDto>('securities', this.securities, EtfSecurityDto);
        this.$formGroup.controls['excludeCashFromOverview'].setValue(this.excludeCashFromOverview);
        this.$formGroup.controls['currentStockRate'].setValue(this.currentStockRate);
        this.$formGroup.controls['aq'].setValue(this.aq);
        this.$formGroup.controls['lastDayDate'].setValue(this.lastDayDate);
        this.$formGroup.controls['lastDayTotal'].setValue(this.lastDayTotal);
        this.fillFormArray<EtfValueDto>('valueHistory', this.valueHistory, EtfValueDto);
        this.$formGroup.controls['depositTotal'].setValue(this.depositTotal);
        this.$formGroup.controls['depositYearToDate'].setValue(this.depositYearToDate);
        this.$formGroup.controls['partnerBankName'].setValue(this.partnerBankName);
        this.$formGroup.controls['partnerBank'].setValue(this.partnerBank);
        this.$formGroup.controls['customerRole'].setValue(this.customerRole);
        this.depotPerformance.setFormGroupValues();
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

