/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { WealthManagementOnboardingGender } from './enums';
import { AccountMaritalStatus } from './enums';
import { EmploymentType } from './enums';
import { EducationType } from './enums';
import { IndustryType } from './enums';
import { WealthManagementInitialDebitType } from './enums';

export interface IEtfOnboardingPersonalDataDto {
    gender?: WealthManagementOnboardingGender;
    title?: string;
    firstName?: string;
    lastName?: string;
    maritalStatus?: AccountMaritalStatus;
    dateOfBirth?: Date;
    countryOfBirth?: string;
    placeOfBirth?: string;
    citizenship?: string;
    politicallyExposedPerson?: boolean;
    street?: string;
    streetNo?: string;
    additionalAddress?: string;
    postalCode?: string;
    town?: string;
    country?: string;
    mobile?: string;
    email?: string;
    employment?: EmploymentType;
    education?: EducationType;
    industry?: IndustryType;
    knowledgeStocks?: boolean;
    knowledgeBonds?: boolean;
    knowledgeFunds?: boolean;
    knowledgeMercantile?: boolean;
    knowledgeCrypto?: boolean;
    experienceStocks?: number;
    experienceBonds?: number;
    experienceFunds?: number;
    experienceMercantile?: number;
    experienceCrypto?: number;
    refAccountFirstName?: string;
    refAccountLastName?: string;
    refAccountIBAN?: string;
    taxIDOne?: string;
    taxCountryOne?: string;
    taxIDTwo?: string;
    taxCountryTwo?: string;
    churchTaxDeduction?: boolean;
    instructionTaxFreeAmount?: boolean;
    taxFreeAmount?: number;
    notUsTaxLiability?: boolean;
    debit?: WealthManagementInitialDebitType;
}


export class EtfOnboardingPersonalDataDto extends BaseModel implements IEtfOnboardingPersonalDataDto  {
    gender: WealthManagementOnboardingGender;
    title: string;
    firstName: string;
    lastName: string;
    maritalStatus: AccountMaritalStatus;
    dateOfBirth: Date;
    countryOfBirth: string;
    placeOfBirth: string;
    citizenship: string;
    politicallyExposedPerson: boolean;
    street: string;
    streetNo: string;
    additionalAddress: string;
    postalCode: string;
    town: string;
    country: string;
    mobile: string;
    email: string;
    employment: EmploymentType;
    education: EducationType;
    industry: IndustryType;
    knowledgeStocks: boolean;
    knowledgeBonds: boolean;
    knowledgeFunds: boolean;
    knowledgeMercantile: boolean;
    knowledgeCrypto: boolean;
    experienceStocks: number;
    experienceBonds: number;
    experienceFunds: number;
    experienceMercantile: number;
    experienceCrypto: number;
    refAccountFirstName: string;
    refAccountLastName: string;
    refAccountIBAN: string;
    taxIDOne: string;
    taxCountryOne: string;
    taxIDTwo: string;
    taxCountryTwo: string;
    churchTaxDeduction: boolean;
    instructionTaxFreeAmount: boolean;
    taxFreeAmount: number;
    notUsTaxLiability: boolean;
    debit: WealthManagementInitialDebitType;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.gender = rawValues.gender;
            this.title = rawValues.title;
            this.firstName = rawValues.firstName;
            this.lastName = rawValues.lastName;
            this.maritalStatus = rawValues.maritalStatus;
            this.dateOfBirth = rawValues.dateOfBirth;
            this.countryOfBirth = rawValues.countryOfBirth;
            this.placeOfBirth = rawValues.placeOfBirth;
            this.citizenship = rawValues.citizenship;
            this.politicallyExposedPerson = rawValues.politicallyExposedPerson;
            this.street = rawValues.street;
            this.streetNo = rawValues.streetNo;
            this.additionalAddress = rawValues.additionalAddress;
            this.postalCode = rawValues.postalCode;
            this.town = rawValues.town;
            this.country = rawValues.country;
            this.mobile = rawValues.mobile;
            this.email = rawValues.email;
            this.employment = rawValues.employment;
            this.education = rawValues.education;
            this.industry = rawValues.industry;
            this.knowledgeStocks = rawValues.knowledgeStocks;
            this.knowledgeBonds = rawValues.knowledgeBonds;
            this.knowledgeFunds = rawValues.knowledgeFunds;
            this.knowledgeMercantile = rawValues.knowledgeMercantile;
            this.knowledgeCrypto = rawValues.knowledgeCrypto;
            this.experienceStocks = rawValues.experienceStocks;
            this.experienceBonds = rawValues.experienceBonds;
            this.experienceFunds = rawValues.experienceFunds;
            this.experienceMercantile = rawValues.experienceMercantile;
            this.experienceCrypto = rawValues.experienceCrypto;
            this.refAccountFirstName = rawValues.refAccountFirstName;
            this.refAccountLastName = rawValues.refAccountLastName;
            this.refAccountIBAN = rawValues.refAccountIBAN;
            this.taxIDOne = rawValues.taxIDOne;
            this.taxCountryOne = rawValues.taxCountryOne;
            this.taxIDTwo = rawValues.taxIDTwo;
            this.taxCountryTwo = rawValues.taxCountryTwo;
            this.churchTaxDeduction = rawValues.churchTaxDeduction;
            this.instructionTaxFreeAmount = rawValues.instructionTaxFreeAmount;
            this.taxFreeAmount = rawValues.taxFreeAmount;
            this.notUsTaxLiability = rawValues.notUsTaxLiability;
            this.debit = rawValues.debit;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                gender: new FormControl(this.gender, [enumValidator(WealthManagementOnboardingGender), ]),
                title: new FormControl(this.title),
                firstName: new FormControl(this.firstName),
                lastName: new FormControl(this.lastName),
                maritalStatus: new FormControl(this.maritalStatus, [enumValidator(AccountMaritalStatus), ]),
                dateOfBirth: new FormControl(this.dateOfBirth),
                countryOfBirth: new FormControl(this.countryOfBirth),
                placeOfBirth: new FormControl(this.placeOfBirth),
                citizenship: new FormControl(this.citizenship),
                politicallyExposedPerson: new FormControl(this.politicallyExposedPerson),
                street: new FormControl(this.street),
                streetNo: new FormControl(this.streetNo),
                additionalAddress: new FormControl(this.additionalAddress),
                postalCode: new FormControl(this.postalCode),
                town: new FormControl(this.town),
                country: new FormControl(this.country),
                mobile: new FormControl(this.mobile),
                email: new FormControl(this.email),
                employment: new FormControl(this.employment, [enumValidator(EmploymentType), ]),
                education: new FormControl(this.education, [enumValidator(EducationType), ]),
                industry: new FormControl(this.industry, [enumValidator(IndustryType), ]),
                knowledgeStocks: new FormControl(this.knowledgeStocks),
                knowledgeBonds: new FormControl(this.knowledgeBonds),
                knowledgeFunds: new FormControl(this.knowledgeFunds),
                knowledgeMercantile: new FormControl(this.knowledgeMercantile),
                knowledgeCrypto: new FormControl(this.knowledgeCrypto),
                experienceStocks: new FormControl(this.experienceStocks),
                experienceBonds: new FormControl(this.experienceBonds),
                experienceFunds: new FormControl(this.experienceFunds),
                experienceMercantile: new FormControl(this.experienceMercantile),
                experienceCrypto: new FormControl(this.experienceCrypto),
                refAccountFirstName: new FormControl(this.refAccountFirstName),
                refAccountLastName: new FormControl(this.refAccountLastName),
                refAccountIBAN: new FormControl(this.refAccountIBAN),
                taxIDOne: new FormControl(this.taxIDOne),
                taxCountryOne: new FormControl(this.taxCountryOne),
                taxIDTwo: new FormControl(this.taxIDTwo),
                taxCountryTwo: new FormControl(this.taxCountryTwo),
                churchTaxDeduction: new FormControl(this.churchTaxDeduction),
                instructionTaxFreeAmount: new FormControl(this.instructionTaxFreeAmount),
                taxFreeAmount: new FormControl(this.taxFreeAmount),
                notUsTaxLiability: new FormControl(this.notUsTaxLiability),
                debit: new FormControl(this.debit, [enumValidator(WealthManagementInitialDebitType), ]),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['gender'].setValue(this.gender);
        this.$formGroup.controls['title'].setValue(this.title);
        this.$formGroup.controls['firstName'].setValue(this.firstName);
        this.$formGroup.controls['lastName'].setValue(this.lastName);
        this.$formGroup.controls['maritalStatus'].setValue(this.maritalStatus);
        this.$formGroup.controls['dateOfBirth'].setValue(this.dateOfBirth);
        this.$formGroup.controls['countryOfBirth'].setValue(this.countryOfBirth);
        this.$formGroup.controls['placeOfBirth'].setValue(this.placeOfBirth);
        this.$formGroup.controls['citizenship'].setValue(this.citizenship);
        this.$formGroup.controls['politicallyExposedPerson'].setValue(this.politicallyExposedPerson);
        this.$formGroup.controls['street'].setValue(this.street);
        this.$formGroup.controls['streetNo'].setValue(this.streetNo);
        this.$formGroup.controls['additionalAddress'].setValue(this.additionalAddress);
        this.$formGroup.controls['postalCode'].setValue(this.postalCode);
        this.$formGroup.controls['town'].setValue(this.town);
        this.$formGroup.controls['country'].setValue(this.country);
        this.$formGroup.controls['mobile'].setValue(this.mobile);
        this.$formGroup.controls['email'].setValue(this.email);
        this.$formGroup.controls['employment'].setValue(this.employment);
        this.$formGroup.controls['education'].setValue(this.education);
        this.$formGroup.controls['industry'].setValue(this.industry);
        this.$formGroup.controls['knowledgeStocks'].setValue(this.knowledgeStocks);
        this.$formGroup.controls['knowledgeBonds'].setValue(this.knowledgeBonds);
        this.$formGroup.controls['knowledgeFunds'].setValue(this.knowledgeFunds);
        this.$formGroup.controls['knowledgeMercantile'].setValue(this.knowledgeMercantile);
        this.$formGroup.controls['knowledgeCrypto'].setValue(this.knowledgeCrypto);
        this.$formGroup.controls['experienceStocks'].setValue(this.experienceStocks);
        this.$formGroup.controls['experienceBonds'].setValue(this.experienceBonds);
        this.$formGroup.controls['experienceFunds'].setValue(this.experienceFunds);
        this.$formGroup.controls['experienceMercantile'].setValue(this.experienceMercantile);
        this.$formGroup.controls['experienceCrypto'].setValue(this.experienceCrypto);
        this.$formGroup.controls['refAccountFirstName'].setValue(this.refAccountFirstName);
        this.$formGroup.controls['refAccountLastName'].setValue(this.refAccountLastName);
        this.$formGroup.controls['refAccountIBAN'].setValue(this.refAccountIBAN);
        this.$formGroup.controls['taxIDOne'].setValue(this.taxIDOne);
        this.$formGroup.controls['taxCountryOne'].setValue(this.taxCountryOne);
        this.$formGroup.controls['taxIDTwo'].setValue(this.taxIDTwo);
        this.$formGroup.controls['taxCountryTwo'].setValue(this.taxCountryTwo);
        this.$formGroup.controls['churchTaxDeduction'].setValue(this.churchTaxDeduction);
        this.$formGroup.controls['instructionTaxFreeAmount'].setValue(this.instructionTaxFreeAmount);
        this.$formGroup.controls['taxFreeAmount'].setValue(this.taxFreeAmount);
        this.$formGroup.controls['notUsTaxLiability'].setValue(this.notUsTaxLiability);
        this.$formGroup.controls['debit'].setValue(this.debit);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

