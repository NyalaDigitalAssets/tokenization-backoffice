/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';



export interface IEtfSecurityDto {
    id?: number;
    total?: number;
    quantity?: number;
    name?: string;
    wkn?: string;
    isin?: string;
    assetClassName?: string;
    region?: string;
    stockRate?: number;
}


export class EtfSecurityDto extends BaseModel implements IEtfSecurityDto  {
    id: number;
    total: number;
    quantity: number;
    name: string;
    wkn: string;
    isin: string;
    assetClassName: string;
    region: string;
    stockRate: number;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.total = rawValues.total;
            this.quantity = rawValues.quantity;
            this.name = rawValues.name;
            this.wkn = rawValues.wkn;
            this.isin = rawValues.isin;
            this.assetClassName = rawValues.assetClassName;
            this.region = rawValues.region;
            this.stockRate = rawValues.stockRate;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                total: new FormControl(this.total),
                quantity: new FormControl(this.quantity),
                name: new FormControl(this.name),
                wkn: new FormControl(this.wkn),
                isin: new FormControl(this.isin),
                assetClassName: new FormControl(this.assetClassName),
                region: new FormControl(this.region),
                stockRate: new FormControl(this.stockRate),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['total'].setValue(this.total);
        this.$formGroup.controls['quantity'].setValue(this.quantity);
        this.$formGroup.controls['name'].setValue(this.name);
        this.$formGroup.controls['wkn'].setValue(this.wkn);
        this.$formGroup.controls['isin'].setValue(this.isin);
        this.$formGroup.controls['assetClassName'].setValue(this.assetClassName);
        this.$formGroup.controls['region'].setValue(this.region);
        this.$formGroup.controls['stockRate'].setValue(this.stockRate);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

