/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';



export interface IInvestmentBondDepotPerformanceDto {
    date?: Date;
    valueHistoryAmount?: number;
    valueHistoryCashAccount?: number;
    dailyPerformance?: number;
    inceptionToDatePerformance?: number;
    yearToDatePerformance?: number;
    quarterToDatePerformance?: number;
    monthToDatePerformance?: number;
    dailyPayInsPayOuts?: number;
    inceptionToDatePayInsPayOuts?: number;
    yearToDatePayInsPayOuts?: number;
    quarterToDatePayInsPayOuts?: number;
    monthToDatePayInsPayOuts?: number;
}


export class InvestmentBondDepotPerformanceDto extends BaseModel implements IInvestmentBondDepotPerformanceDto  {
    date: Date;
    valueHistoryAmount: number;
    valueHistoryCashAccount: number;
    dailyPerformance: number;
    inceptionToDatePerformance: number;
    yearToDatePerformance: number;
    quarterToDatePerformance: number;
    monthToDatePerformance: number;
    dailyPayInsPayOuts: number;
    inceptionToDatePayInsPayOuts: number;
    yearToDatePayInsPayOuts: number;
    quarterToDatePayInsPayOuts: number;
    monthToDatePayInsPayOuts: number;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.date = rawValues.date;
            this.valueHistoryAmount = rawValues.valueHistoryAmount;
            this.valueHistoryCashAccount = rawValues.valueHistoryCashAccount;
            this.dailyPerformance = rawValues.dailyPerformance;
            this.inceptionToDatePerformance = rawValues.inceptionToDatePerformance;
            this.yearToDatePerformance = rawValues.yearToDatePerformance;
            this.quarterToDatePerformance = rawValues.quarterToDatePerformance;
            this.monthToDatePerformance = rawValues.monthToDatePerformance;
            this.dailyPayInsPayOuts = rawValues.dailyPayInsPayOuts;
            this.inceptionToDatePayInsPayOuts = rawValues.inceptionToDatePayInsPayOuts;
            this.yearToDatePayInsPayOuts = rawValues.yearToDatePayInsPayOuts;
            this.quarterToDatePayInsPayOuts = rawValues.quarterToDatePayInsPayOuts;
            this.monthToDatePayInsPayOuts = rawValues.monthToDatePayInsPayOuts;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                date: new FormControl(this.date),
                valueHistoryAmount: new FormControl(this.valueHistoryAmount),
                valueHistoryCashAccount: new FormControl(this.valueHistoryCashAccount),
                dailyPerformance: new FormControl(this.dailyPerformance),
                inceptionToDatePerformance: new FormControl(this.inceptionToDatePerformance),
                yearToDatePerformance: new FormControl(this.yearToDatePerformance),
                quarterToDatePerformance: new FormControl(this.quarterToDatePerformance),
                monthToDatePerformance: new FormControl(this.monthToDatePerformance),
                dailyPayInsPayOuts: new FormControl(this.dailyPayInsPayOuts),
                inceptionToDatePayInsPayOuts: new FormControl(this.inceptionToDatePayInsPayOuts),
                yearToDatePayInsPayOuts: new FormControl(this.yearToDatePayInsPayOuts),
                quarterToDatePayInsPayOuts: new FormControl(this.quarterToDatePayInsPayOuts),
                monthToDatePayInsPayOuts: new FormControl(this.monthToDatePayInsPayOuts),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['date'].setValue(this.date);
        this.$formGroup.controls['valueHistoryAmount'].setValue(this.valueHistoryAmount);
        this.$formGroup.controls['valueHistoryCashAccount'].setValue(this.valueHistoryCashAccount);
        this.$formGroup.controls['dailyPerformance'].setValue(this.dailyPerformance);
        this.$formGroup.controls['inceptionToDatePerformance'].setValue(this.inceptionToDatePerformance);
        this.$formGroup.controls['yearToDatePerformance'].setValue(this.yearToDatePerformance);
        this.$formGroup.controls['quarterToDatePerformance'].setValue(this.quarterToDatePerformance);
        this.$formGroup.controls['monthToDatePerformance'].setValue(this.monthToDatePerformance);
        this.$formGroup.controls['dailyPayInsPayOuts'].setValue(this.dailyPayInsPayOuts);
        this.$formGroup.controls['inceptionToDatePayInsPayOuts'].setValue(this.inceptionToDatePayInsPayOuts);
        this.$formGroup.controls['yearToDatePayInsPayOuts'].setValue(this.yearToDatePayInsPayOuts);
        this.$formGroup.controls['quarterToDatePayInsPayOuts'].setValue(this.quarterToDatePayInsPayOuts);
        this.$formGroup.controls['monthToDatePayInsPayOuts'].setValue(this.monthToDatePayInsPayOuts);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

