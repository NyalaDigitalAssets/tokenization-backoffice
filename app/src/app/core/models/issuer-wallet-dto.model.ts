/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { IssuerWalletRoles } from './enums';
import { Blockchains } from './enums';
import { BalancesInDecimalDto } from './balances-in-decimal-dto.model';
import { TokenizedAssetDto } from './tokenized-asset-dto.model';

export interface IIssuerWalletDto {
    id?: string;
    issuerWalletSeedId?: string;
    role?: IssuerWalletRoles;
    created?: Date;
    blockchain?: Blockchains;
    publicAddress?: string;
    accountIndex?: number;
    name?: string;
    balance?: BalancesInDecimalDto;
    tokenizedAssets?: Array<TokenizedAssetDto>;
    seedLockStatus?: boolean;
    nativeCryptoAssetSymbol?: string;
    nativeCryptoAssetId?: string;
}


export class IssuerWalletDto extends BaseModel implements IIssuerWalletDto  {
    id: string;
    issuerWalletSeedId: string;
    role: IssuerWalletRoles;
    created: Date;
    blockchain: Blockchains;
    publicAddress: string;
    accountIndex: number;
    name: string;
    balance: BalancesInDecimalDto;
    tokenizedAssets: Array<TokenizedAssetDto>;
    seedLockStatus: boolean;
    nativeCryptoAssetSymbol: string;
    nativeCryptoAssetId: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.balance = new BalancesInDecimalDto(); 
        this.tokenizedAssets = new Array<TokenizedAssetDto>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.issuerWalletSeedId = rawValues.issuerWalletSeedId;
            this.role = rawValues.role;
            this.created = rawValues.created;
            this.blockchain = rawValues.blockchain;
            this.publicAddress = rawValues.publicAddress;
            this.accountIndex = rawValues.accountIndex;
            this.name = rawValues.name;
            this.balance.setValues(rawValues.balance, useFormGroupValuesToModel);
            this.fillModelArray<TokenizedAssetDto>(this, 'tokenizedAssets', rawValues.tokenizedAssets, useFormGroupValuesToModel, TokenizedAssetDto, SubTypeFactory.createSubTypeInstance);
            this.seedLockStatus = rawValues.seedLockStatus;
            this.nativeCryptoAssetSymbol = rawValues.nativeCryptoAssetSymbol;
            this.nativeCryptoAssetId = rawValues.nativeCryptoAssetId;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                issuerWalletSeedId: new FormControl(this.issuerWalletSeedId),
                role: new FormControl(this.role, [enumValidator(IssuerWalletRoles), ]),
                created: new FormControl(this.created),
                blockchain: new FormControl(this.blockchain, [enumValidator(Blockchains), ]),
                publicAddress: new FormControl(this.publicAddress),
                accountIndex: new FormControl(this.accountIndex),
                name: new FormControl(this.name),
                balance: this.balance.$formGroup,
                tokenizedAssets: new FormArray([]),
                seedLockStatus: new FormControl(this.seedLockStatus),
                nativeCryptoAssetSymbol: new FormControl(this.nativeCryptoAssetSymbol),
                nativeCryptoAssetId: new FormControl(this.nativeCryptoAssetId),
            });
            // generate FormArray control elements
            this.fillFormArray<TokenizedAssetDto>('tokenizedAssets', this.tokenizedAssets, TokenizedAssetDto);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['issuerWalletSeedId'].setValue(this.issuerWalletSeedId);
        this.$formGroup.controls['role'].setValue(this.role);
        this.$formGroup.controls['created'].setValue(this.created);
        this.$formGroup.controls['blockchain'].setValue(this.blockchain);
        this.$formGroup.controls['publicAddress'].setValue(this.publicAddress);
        this.$formGroup.controls['accountIndex'].setValue(this.accountIndex);
        this.$formGroup.controls['name'].setValue(this.name);
        this.balance.setFormGroupValues();
        this.fillFormArray<TokenizedAssetDto>('tokenizedAssets', this.tokenizedAssets, TokenizedAssetDto);
        this.$formGroup.controls['seedLockStatus'].setValue(this.seedLockStatus);
        this.$formGroup.controls['nativeCryptoAssetSymbol'].setValue(this.nativeCryptoAssetSymbol);
        this.$formGroup.controls['nativeCryptoAssetId'].setValue(this.nativeCryptoAssetId);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

