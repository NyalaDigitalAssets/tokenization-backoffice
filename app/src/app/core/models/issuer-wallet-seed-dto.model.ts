/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { IssuerWalletDto } from './issuer-wallet-dto.model';

export interface IIssuerWalletSeedDto {
    id?: string;
    createdDt?: Date;
    wallets?: Array<IssuerWalletDto>;
}


export class IssuerWalletSeedDto extends BaseModel implements IIssuerWalletSeedDto  {
    id: string;
    createdDt: Date;
    wallets: Array<IssuerWalletDto>;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.wallets = new Array<IssuerWalletDto>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.createdDt = rawValues.createdDt;
            this.fillModelArray<IssuerWalletDto>(this, 'wallets', rawValues.wallets, useFormGroupValuesToModel, IssuerWalletDto, SubTypeFactory.createSubTypeInstance);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                createdDt: new FormControl(this.createdDt),
                wallets: new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<IssuerWalletDto>('wallets', this.wallets, IssuerWalletDto);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['createdDt'].setValue(this.createdDt);
        this.fillFormArray<IssuerWalletDto>('wallets', this.wallets, IssuerWalletDto);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

