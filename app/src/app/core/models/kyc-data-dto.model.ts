/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { KycAddressDto } from './kyc-address-dto.model';
import { CustomerCompanyDetailDto } from './customer-company-detail-dto.model';

export interface IKycDataDto {
    title?: string;
    firstname: string;
    lastname: string;
    placeOfBirth: string;
    dateOfBirth: Date;
    address: KycAddressDto;
    email: string;
    nonPepPerson: boolean;
    highCorruptionIndex: boolean;
    nonSanctionedCountry: boolean;
    nonUsTaxPerson: boolean;
    identVerified: boolean;
    eulaAgreed: boolean;
    company?: CustomerCompanyDetailDto;
}


export class KycDataDto extends BaseModel implements IKycDataDto  {
    title: string;
    firstname: string;
    lastname: string;
    placeOfBirth: string;
    dateOfBirth: Date;
    address: KycAddressDto;
    email: string;
    nonPepPerson: boolean;
    highCorruptionIndex: boolean;
    nonSanctionedCountry: boolean;
    nonUsTaxPerson: boolean;
    identVerified: boolean;
    eulaAgreed: boolean;
    company: CustomerCompanyDetailDto;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.address = new KycAddressDto(); 
        this.company = new CustomerCompanyDetailDto(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.title = rawValues.title;
            this.firstname = rawValues.firstname;
            this.lastname = rawValues.lastname;
            this.placeOfBirth = rawValues.placeOfBirth;
            this.dateOfBirth = rawValues.dateOfBirth;
            this.address.setValues(rawValues.address, useFormGroupValuesToModel);
            this.email = rawValues.email;
            this.nonPepPerson = rawValues.nonPepPerson;
            this.highCorruptionIndex = rawValues.highCorruptionIndex;
            this.nonSanctionedCountry = rawValues.nonSanctionedCountry;
            this.nonUsTaxPerson = rawValues.nonUsTaxPerson;
            this.identVerified = rawValues.identVerified;
            this.eulaAgreed = rawValues.eulaAgreed;
            this.company.setValues(rawValues.company, useFormGroupValuesToModel);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                title: new FormControl(this.title, [Validators.minLength(0), Validators.maxLength(64), ]),
                firstname: new FormControl(this.firstname, [Validators.required, Validators.minLength(0), Validators.maxLength(64), ]),
                lastname: new FormControl(this.lastname, [Validators.required, Validators.minLength(0), Validators.maxLength(64), ]),
                placeOfBirth: new FormControl(this.placeOfBirth, [Validators.required, Validators.minLength(0), Validators.maxLength(100), ]),
                dateOfBirth: new FormControl(this.dateOfBirth, [Validators.required, ]),
                address: this.address.$formGroup,
                email: new FormControl(this.email, [Validators.required, Validators.minLength(0), Validators.maxLength(64), ]),
                nonPepPerson: new FormControl(this.nonPepPerson, [Validators.required, ]),
                highCorruptionIndex: new FormControl(this.highCorruptionIndex, [Validators.required, ]),
                nonSanctionedCountry: new FormControl(this.nonSanctionedCountry, [Validators.required, ]),
                nonUsTaxPerson: new FormControl(this.nonUsTaxPerson, [Validators.required, ]),
                identVerified: new FormControl(this.identVerified, [Validators.required, ]),
                eulaAgreed: new FormControl(this.eulaAgreed, [Validators.required, ]),
                company: this.company.$formGroup,
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['title'].setValue(this.title);
        this.$formGroup.controls['firstname'].setValue(this.firstname);
        this.$formGroup.controls['lastname'].setValue(this.lastname);
        this.$formGroup.controls['placeOfBirth'].setValue(this.placeOfBirth);
        this.$formGroup.controls['dateOfBirth'].setValue(this.dateOfBirth);
        this.address.setFormGroupValues();
        this.$formGroup.controls['email'].setValue(this.email);
        this.$formGroup.controls['nonPepPerson'].setValue(this.nonPepPerson);
        this.$formGroup.controls['highCorruptionIndex'].setValue(this.highCorruptionIndex);
        this.$formGroup.controls['nonSanctionedCountry'].setValue(this.nonSanctionedCountry);
        this.$formGroup.controls['nonUsTaxPerson'].setValue(this.nonUsTaxPerson);
        this.$formGroup.controls['identVerified'].setValue(this.identVerified);
        this.$formGroup.controls['eulaAgreed'].setValue(this.eulaAgreed);
        this.company.setFormGroupValues();
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

