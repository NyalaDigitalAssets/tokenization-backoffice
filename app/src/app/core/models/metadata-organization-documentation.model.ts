/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';



export interface IMetadataOrganizationDocumentation {
    name?: string;
    dba?: string;
    url?: string;
    logoUrl?: string;
    description?: string;
    address?: string;
    phoneNumber?: string;
    email?: string;
}


export class MetadataOrganizationDocumentation extends BaseModel implements IMetadataOrganizationDocumentation  {
    name: string;
    dba: string;
    url: string;
    logoUrl: string;
    description: string;
    address: string;
    phoneNumber: string;
    email: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.name = rawValues.name;
            this.dba = rawValues.dba;
            this.url = rawValues.url;
            this.logoUrl = rawValues.logoUrl;
            this.description = rawValues.description;
            this.address = rawValues.address;
            this.phoneNumber = rawValues.phoneNumber;
            this.email = rawValues.email;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                name: new FormControl(this.name),
                dba: new FormControl(this.dba),
                url: new FormControl(this.url),
                logoUrl: new FormControl(this.logoUrl),
                description: new FormControl(this.description),
                address: new FormControl(this.address),
                phoneNumber: new FormControl(this.phoneNumber),
                email: new FormControl(this.email),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['name'].setValue(this.name);
        this.$formGroup.controls['dba'].setValue(this.dba);
        this.$formGroup.controls['url'].setValue(this.url);
        this.$formGroup.controls['logoUrl'].setValue(this.logoUrl);
        this.$formGroup.controls['description'].setValue(this.description);
        this.$formGroup.controls['address'].setValue(this.address);
        this.$formGroup.controls['phoneNumber'].setValue(this.phoneNumber);
        this.$formGroup.controls['email'].setValue(this.email);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

