/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { TransactionActions } from './enums';
import { TxStatusDto } from './enums';

export interface ITransactionToShowDto {
    txAction?: TransactionActions;
    created?: Date;
    txId?: string;
    id?: string;
    institutionId?: string;
    txBody?: string;
    modified?: Date;
    status?: TxStatusDto;
    retryCounter?: number;
}


export class TransactionToShowDto extends BaseModel implements ITransactionToShowDto  {
    txAction: TransactionActions;
    created: Date;
    txId: string;
    id: string;
    institutionId: string;
    txBody: string;
    modified: Date;
    status: TxStatusDto;
    retryCounter: number;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.txAction = rawValues.txAction;
            this.created = rawValues.created;
            this.txId = rawValues.txId;
            this.id = rawValues.id;
            this.institutionId = rawValues.institutionId;
            this.txBody = rawValues.txBody;
            this.modified = rawValues.modified;
            this.status = rawValues.status;
            this.retryCounter = rawValues.retryCounter;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                txAction: new FormControl(this.txAction, [enumValidator(TransactionActions), ]),
                created: new FormControl(this.created),
                txId: new FormControl(this.txId),
                id: new FormControl(this.id),
                institutionId: new FormControl(this.institutionId),
                txBody: new FormControl(this.txBody),
                modified: new FormControl(this.modified),
                status: new FormControl(this.status, [enumValidator(TxStatusDto), ]),
                retryCounter: new FormControl(this.retryCounter),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['txAction'].setValue(this.txAction);
        this.$formGroup.controls['created'].setValue(this.created);
        this.$formGroup.controls['txId'].setValue(this.txId);
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['institutionId'].setValue(this.institutionId);
        this.$formGroup.controls['txBody'].setValue(this.txBody);
        this.$formGroup.controls['modified'].setValue(this.modified);
        this.$formGroup.controls['status'].setValue(this.status);
        this.$formGroup.controls['retryCounter'].setValue(this.retryCounter);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

