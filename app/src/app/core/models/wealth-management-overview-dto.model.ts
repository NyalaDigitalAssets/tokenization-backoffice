/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { WealthManagementOverviewInvestmentDto } from './wealth-management-overview-investment-dto.model';
import { WealthManagementDocumentDto } from './wealth-management-document-dto.model';

export interface IWealthManagementOverviewDto {
    investments?: Array<WealthManagementOverviewInvestmentDto>;
    total?: number;
    performance?: number;
    documents?: Array<WealthManagementDocumentDto>;
}


export class WealthManagementOverviewDto extends BaseModel implements IWealthManagementOverviewDto  {
    investments: Array<WealthManagementOverviewInvestmentDto>;
    total: number;
    performance: number;
    documents: Array<WealthManagementDocumentDto>;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.investments = new Array<WealthManagementOverviewInvestmentDto>(); 
        this.documents = new Array<WealthManagementDocumentDto>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.fillModelArray<WealthManagementOverviewInvestmentDto>(this, 'investments', rawValues.investments, useFormGroupValuesToModel, WealthManagementOverviewInvestmentDto, SubTypeFactory.createSubTypeInstance);
            this.total = rawValues.total;
            this.performance = rawValues.performance;
            this.fillModelArray<WealthManagementDocumentDto>(this, 'documents', rawValues.documents, useFormGroupValuesToModel, WealthManagementDocumentDto, SubTypeFactory.createSubTypeInstance);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                investments: new FormArray([]),
                total: new FormControl(this.total),
                performance: new FormControl(this.performance),
                documents: new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<WealthManagementOverviewInvestmentDto>('investments', this.investments, WealthManagementOverviewInvestmentDto);
            // generate FormArray control elements
            this.fillFormArray<WealthManagementDocumentDto>('documents', this.documents, WealthManagementDocumentDto);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.fillFormArray<WealthManagementOverviewInvestmentDto>('investments', this.investments, WealthManagementOverviewInvestmentDto);
        this.$formGroup.controls['total'].setValue(this.total);
        this.$formGroup.controls['performance'].setValue(this.performance);
        this.fillFormArray<WealthManagementDocumentDto>('documents', this.documents, WealthManagementDocumentDto);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

