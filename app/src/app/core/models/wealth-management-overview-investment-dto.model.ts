/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';



export interface IWealthManagementOverviewInvestmentDto {
    id?: string;
    name?: string;
    productType?: number;
    externalIdentifier?: string;
    externalCustomerName?: string;
    updated?: Date;
    total?: number;
}


export class WealthManagementOverviewInvestmentDto extends BaseModel implements IWealthManagementOverviewInvestmentDto  {
    id: string;
    name: string;
    productType: number;
    externalIdentifier: string;
    externalCustomerName: string;
    updated: Date;
    total: number;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.name = rawValues.name;
            this.productType = rawValues.productType;
            this.externalIdentifier = rawValues.externalIdentifier;
            this.externalCustomerName = rawValues.externalCustomerName;
            this.updated = rawValues.updated;
            this.total = rawValues.total;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                name: new FormControl(this.name),
                productType: new FormControl(this.productType),
                externalIdentifier: new FormControl(this.externalIdentifier),
                externalCustomerName: new FormControl(this.externalCustomerName),
                updated: new FormControl(this.updated),
                total: new FormControl(this.total),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['name'].setValue(this.name);
        this.$formGroup.controls['productType'].setValue(this.productType);
        this.$formGroup.controls['externalIdentifier'].setValue(this.externalIdentifier);
        this.$formGroup.controls['externalCustomerName'].setValue(this.externalCustomerName);
        this.$formGroup.controls['updated'].setValue(this.updated);
        this.$formGroup.controls['total'].setValue(this.total);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

